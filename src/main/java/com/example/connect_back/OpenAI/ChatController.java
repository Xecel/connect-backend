package com.example.connect_back.OpenAI;import com.example.connect_back.OpenAI.DTO.ChatRequest;import com.example.connect_back.OpenAI.DTO.ChatResponse;import com.example.connect_back.OpenAI.DTO.KorEngSentence;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.beans.factory.annotation.Value;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestTemplate;import lombok.Data;@Data@RestController@CrossOrigin(origins = "http://localhost:5173")@RequestMapping("/OpenAI")public class ChatController {    @Qualifier("openaiRestTemplate")    private final RestTemplate restTemplate;    @Value("${openai.model}")    private String model;    @Value("${openai.api.url}")    private String apiUrl;    @PostMapping("/general")    public String general(@RequestBody KorEngSentence prompt) {        // make request        ChatRequest request = new ChatRequest(model);        request.makeGeneralRequest(prompt.getKorSentence());        // receive response        ChatResponse response = restTemplate.postForObject(apiUrl, request, ChatResponse.class);        // null check        if (response == null) {            return "No response";        }        // return received content        return response.resolveContent();    }    @PostMapping("/translate")    public String translate(@RequestBody KorEngSentence prompt) {        // make request        ChatRequest request = new ChatRequest(model);        request.makeTransRequest(prompt.getKorSentence());        // receive response        ChatResponse response = restTemplate.postForObject(apiUrl, request, ChatResponse.class);        // null check        if (response == null) {            return "No response";        }        // return received content        return response.resolveContent();    }    @PostMapping("/reason")    public String reason(@RequestBody KorEngSentence prompt) {        // make request        ChatRequest request = new ChatRequest(model);        request.makeReasonRequest(prompt.getKorSentence(), prompt.getEngSentence());        // receive response        ChatResponse response = restTemplate.postForObject(apiUrl, request, ChatResponse.class);        // null check        if (response == null) {            return "No response";        }        // return received content        return response.resolveContent();    }}